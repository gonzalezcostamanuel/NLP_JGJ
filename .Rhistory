hist(heart[heart$famhist == "Present",]$ldl)
# Histograma del colesterol de todos los pacientes que no tienen antecedentes
hist(heart[heart$famhist == "Absent",]$ldl)
mean(heart[heart$famhist == "Present",]$ldl)
#Colesterol medio en los pacientes sin antecedentes
mean(heart[heart$famhist == "Absent",]$ldl)
#Colesterol medio en los pacientes con enfermedad cardiovascular
mean(heart[heart$chd == 1,]$ldl)
#Colesterol medio en los pacientes sin enfermedad cardiovascular
mean(heart[heart$chd == 0,]$ldl)
boxplot(heart$ldl ~heart$chd)
#Caja de bigotes del colesterol frente a los antecedentes
boxplot(heart$ldl ~heart$famhist)
#######################
tabla1 <- table(heart$famhist,heart$chd)
tabla1
plot(tabla1, col = c("red", "blue"), main = "famhist vs. enfermedad")
chisq.test(tabla1)
#
plot(hear$ldl, heart$famhist)
#
plot(heart$ldl, heart$famhist)
#
plot(heart$ldl, heart$famhist, heart$chd)
#
plot(heart$ldl, heart$famhist ~heart$chd)
#
plot3d(heart$ldl, heart$famhist, heart$chd)
# Comprobamos si faltan datos en alguna entrada
sum(is.na(heart))
# Analizamos la estructura del dataset
str(heart)
#Cambiamos el nombre de las columas
colnames(heart) <- c('SBP', 'TABACO', 'LDL', 'ADIPOSIDAD', 'FAMHIST', 'TIPOA', 'OBESIDAD', 'ALCOHOL', 'EDAD', 'CHD')
str(heart)
#3. Explore la relación entre los niveles de ldl y atributos como el tabaco, la obesidad, la adiposidad y el alcohol.
library(ggplot2)
library(grid)
library(gridExtra)
r1 <- ggplot(heart) + geom_point(aes(x = LDL, y = TABACO), color = "blue") + labs(x = "LDL", y = "TABACO")
r2 <- ggplot(heart) + geom_point(aes(x = LDL, y = OBESIDAD), color = "orange") + labs(x = "LDL", y = "OBESIDAD")
r3 <- ggplot(heart) + geom_point(aes(x = LDL, y = ADIPOSIDAD), color = "magenta") + labs(x = "LDL", y = "ADIPOSIDAD")
r4 <- ggplot(heart) + geom_point(aes(x = LDL, y = ALCOHOL), color = "green") + labs(x = "LDL", y = "ALCOHOL")
grid.arrange(r1, r2, r3, r4, ncol=2)
# Histograma del colesterol, dice cuántos pacientes hay con cada valor de colesterol
hist(heart$ldl)
# Histograma del colesterol, dice cuántos pacientes hay con cada valor de colesterol
hist(heart$LDL)
# Histograma del colesterol, dice cuántos pacientes hay con cada valor de colesterol
hist(heart$LDL)
# Para obtener todas las filas que tienen antecedentes
heart[heart$FAMHIST == "Present",]
# Histograma del colesterol de todos los pacientes que tienen antecedentes
hist(heart[heart$FAMHIST == "Present",]$LDL)
# Histograma del colesterol de todos los pacientes que no tienen antecedentes
hist(heart[heart$FAMHIST == "Absent",]$LDL)
#Colesterol medio en los pacientes con antecedentes
mean(heart[heart$FAMHIST == "Present",]$LDL)
#Colesterol medio en los pacientes sin antecedentes
mean(heart[heart$FAMHIST == "Absent",]$LDL)
#Colesterol medio en los pacientes con enfermedad cardiovascular
mean(heart[heart$CHD == 1,]$LDL)
#Colesterol medio en los pacientes sin enfermedad cardiovascular
mean(heart[heart$CHD == 0,]$LDL)
#Caja de bigotes del colesterol frente a las enfermedades cardiovasculares
boxplot(heart$LDL ~heart$CHD)
#Caja de bigotes del colesterol frente a los antecedentes
boxplot(heart$LDL ~heart$FAMHIST)
#######################
tabla1 <- table(heart$FAMHIST,heart$CHD)
tabla1
plot(tabla1, col = c("red", "blue"), main = "famhist vs. enfermedad")
chisq.test(tabla1)
#
plot3d(heart$ldl, heart$FAMHIST, heart$chd)
ggplot(heart) + geom_point(aes(x = LDL, y = FAMHIST), color = "blue") + labs(x = "LDL", y = "FAMHIST")
ggplot(heart) + geom_point(aes(x = LDL, y = CHD), color = "orange") + labs(x = "LDL", y = "CHD")
#
plot3d(heart$ldl, heart$FAMHIST, heart$chd)
ggplot(heart) + geom_point(aes(x = LDL, y = CHD), color = "orange") + labs(x = "LDL", y = "CHD")
#3. Explore la relación entre los niveles de ldl y atributos como el tabaco, la obesidad, la adiposidad y el alcohol.
ggplot(heart) + geom_point(aes(x = LDL, y = FAMHIST), color = "blue") + labs(x = "LDL", y = "FAMHIST")
# Caja de bigotes del colesterol frente a los antecedentes
boxplot(heart$LDL ~heart$FAMHIST)
plot(tabla1, col = c("red", "blue"), main = "famhist vs. enfermedad")
# Caja de bigotes del colesterol frente a las enfermedades cardiovasculares
boxplot(heart$LDL ~heart$CHD)
# Caja de bigotes del colesterol frente a los antecedentes
boxplot(heart$LDL ~heart$FAMHIST)
View(heart)
# Para obtener todas las personas de más de 60 años
heart[heart$EDAD >=60,]
# Para obtener todas las personas que fuman
heart[heart$TABACO >=2,]
# Para obtener todas las personas que fuman
heart[heart$TABACO >=5,]
mean(heart$TABACO)
boxplot(heart$TABACO)
# Para obtener todas las personas que fuman
heart[heart$TABACO >=10,]
ggplot(heart) + geom_point(aes(x = LDL, y = CHD), color = "orange") + labs(x = "LDL", y = "CHD")
# Libraries
library(tidyverse)
library(ggplot2)
library(grid)
library(gridExtra)
ggplot(heart) + geom_point(aes(x = LDL, y = CHD), color = "orange") + labs(x = "LDL", y = "CHD")
subset(heart, heart$TABACO>=10 & heart$CHD==1)
# Todas las personas que fuman y que tienen enfermedad del corazón
heart2 = subset(heart, heart$TABACO>=10 & heart$CHD==1)
# Histogram on a Categorical variable
g <- ggplot(heart2, aes(heart2$EDAD))
g + geom_bar(aes(fill=class), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Histogram on Categorical Variable",
subtitle="Manufacturer across Vehicle Classes")
# Histogram on a Categorical variable
g <- ggplot(heart2, aes(EDAD))
g + geom_bar(aes(fill=class), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Histogram on Categorical Variable",
subtitle="Manufacturer across Vehicle Classes")
# Plot
g <- ggplot(heart2, aes(EDAD))
g + geom_density(aes(fill=factor(cyl)), alpha=0.8) +
labs(title="Density plot",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
g + geom_density(aes(), alpha=0.8) +
labs(title="Density plot",
subtitle="City Mileage Grouped by Number of cylinders",
caption="Source: mpg",
x="City Mileage",
fill="# Cylinders")
g + geom_density(aes(), alpha=0.8) +
labs(title="Gráfico de densidad",
subtitle="Edad de la gente con CHD que fuma",
x="Edad",
fill="# Cylinders")
# Caja de bigotes del colesterol frente a los antecedentes
boxplot(heart$LDL ~heart$FAMHIST)
# Estes plots no me sirven
#3. Explore la relación entre los niveles de ldl y atributos como el tabaco, la obesidad, la adiposidad y el alcohol.
ggplot(heart) + geom_point(aes(x = LDL, y = FAMHIST), color = "blue") + labs(x = "LDL", y = "FAMHIST")
plot(tabla1, col = c("red", "blue"), main = "famhist vs. enfermedad")
eigen(matrixP[1:4,])
eigen(matrixP[1:4,])
eigen(matrixP[5:8,])
source("~/OneDrive - Universidad Politécnica de Madrid/10_MASTER/1 CUATRI/00_Intelligent Data Analysis/Homework 1.2/1_1_Heart_Disesase_Study/1-2/ScriptManu.R")
# Libraries
library(tidyverse)
library(GGally)
library(moments)
library(dplyr)
library(nortest)
library(ggplot2)
library(car)
library(MVN)
# Leemos el archivo txt y lo asignamos a una variable
cars <- read.table("cars-PCA.txt", header = FALSE, sep = "", dec = ".")
# Cambiamos los nombres de las columnas
names(cars) <- c("mpg","cylinders","engine displacement", "horsepower", "weight", "acceleration", "model year", "origin", "car name")
# Buscamos los NA -- No hay valores faltantes
sum(is.na(cars))
cars %>% summarise_all(~(sum(is.na(.))))
# Vemos un resumen de las observaciones
str(cars)
# Ejercicio A
# -----------
# Choose a quantitative variable and explore its distribution in terms of descriptive measures of center,
# dispersion, skewness and kurtosis. Is a normal model a plausible one for its distribution?
# If the answer is no, can you think of a transformation of the variable that improves normality.
# Are there any outliers?
# Escogemos la variable "horsepower"
caballos <- cars$horsepower
median(caballos)
# 110
mean(caballos)
# 122.9596
summary(caballos)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
# 46.0    88.0   110.0   123.0   151.5   225.0
# Es una variable con curtosis Leptocúrtica, por lo tanto podemos decir que los valores están muy concentrados en la zona central de la distribución
kurtosis(caballos)
# 2.236132
# Curva de asimetría positiva, los datos se distribuyen a la derecha del punto central(media)
skewness(caballos)
# 0.5144227
# Aplicamos la funcion del coeficiente de variacion para observar la dispersion
cv=function(x){
sd=sqrt(var(x))
mu=abs(mean(x))
sd/mu
}
# sd(caballos)/mean(caballos)
# El CV es de 37% por lo tanto, podemos decir que es un 37% dispersa
cv(caballos)
# 0.3742742
#Calculamos la distribución normal con el metodo Shapiro-Wilk al tener un número de registros mayor a 50.
#H0: La muestra sigue una distribución normal
#H1: La muestra no sigue una distribución normal.
shapiro.test(caballos)
# Como el p valor es menor de 0.05 podemos decir que NO se cumple H0 y no sigue una distribución normal
# Hacemos un histograma, se ve claramente que no sigue una distribución normal
hist(x=caballos)
# Como no es una varaible que sigue una distribución normal, deberiamos normalizarla, para esto podriamos utilizar métodos
# como el boxcox o el Min-Max Normalization o Z-Score Standarization
summary(powerTransform(caballos))
caballos_transf <- bcPower(caballos, lambda=0.0521) #0.0521 porque en el summary sale que Est.Power conveniente es 0.0521
#volvemos a hacer el test de normalidad--->
shapiro.test(caballos_transf)
#Como el p valor es menor de 0.05, sigue sin seguir una distribución normal, pero si que hemos conseguido mejorar la normalidad.
hist(x=caballos_transf)
# Utilizando boxplot podemos detectar si tiene outliers, como podemos ver, no tiene ninguno
boxplot.stats(caballos)
boxplot(caballos)
#Ejercicio 2
# b) Choose two quantitative variables and describe its joint bivariate distribution. Does it seem to be Normal? Are there any outliers?
# mpg and horsepower
bivariate <- data.frame(
"caballos" = cars$horsepower,
"consumo" = cars$mpg
)
plot(bivariate)
# Para saber si es normal
powerTransform(cbind(bivariate$caballos,bivariate$consumo))
#Estimated transformation parameters
#Y1         Y2
#0.1389989 -0.2737593
summary(powerTransform(cbind(bivariate$caballos,bivariate$consumo)~0))
###### Transformations to Multivariate normality
# we are going to transform them with (\lambda_1,\lambda_2) values =c(0.13, -0.27).
# Defining the transformed variable with those lambdas
bcBivariate=bcPower(cbind(bivariate$caballos, bivariate$consumo), c(0.13,-0.27))
#Comparing fitting to a normal distribution before and after the transformation with Mardia test (package MVN)
# Before
mvn(cbind(bivariate$caballos, bivariate$consumo), mvnTest="mardia", multivariatePlot="qq")
# After
mvn(bcBivariate, mvnTest="mardia", multivariatePlot="qq")
# Normality has been improved
# ------------------- LINEA 200 DE LAB 04 --------------------
# Para mirar los outliers
###### Multivariate outliers, package mvoutlier
library(mvoutlier)
##### pcout function, robust method based on principal components
bivariate.out=pcout(bivariate, makeplot=TRUE)
# which potential outliers does it find?
which(bivariate.out$wfinal01==0)
bivariate
#c) Choose a subset of 4 or 5 quantitative variables and explore linear relationships through:
# R matrix of pairwise correlations C.1
matrixP <- data_frame(
"consumo" = cars$mpg,
"caballos" = cars$horsepower,
"peso" = cars$weight,
"cilindrada" = cars$`engine displacement`
)
matrixP
eigen(cov(hbat[,6:22]))
#Can you find the variables involved in the overall linear dependence?
eigen(cov(matrixP))
# However, linear pairwise correlations between those variables are not very strong
cor(matrixP)
# Matrix of partial correlations C.2
library(ppcor) # partial correlations
#Partial correlations, package ppcor. Detailed output
pcor(matrixP)
matrix.partial=pcor(matrixP)$estimate
library(corrgram)
library(corrplot)
#Visualizing partial correlations
corrgram(matrix.partial,
lower.panel=panel.shade, upper.panel=panel.pie,
diag.panel=panel.minmax, text.panel=panel.txt)
corrplot.mixed(matrix.partial,order="AOE" )
# Coefficient of determination (function r2multv() we define in R) C.3
#Define a function r2multv for squared multiple correlation coeficients (r-squared)
r2multv<-function(x){
r2s=1-1/(diag(solve(cov(x)))*diag(cov(x)))
r2s
}
#use it on data set "medifis"
r2multv(matrixP)
# The determinant of R (correlation matrix) as an overall measure of linear relationships.
#In this data set, important linear relationships are present. Let's calculate the determinant of S and R:
det(cor(matrixP))
# An eigenanalysis of matrix R, looking for really small eigenvalues.
matrix(matrixP)
eigen(matrixP[1:4,])
setwd("~/OneDrive - Universidad Politécnica de Madrid/10_MASTER/1 CUATRI/00_Intelligent Systems/Project NLP")
reinaRoja <- readLines("Recursos/8-ReinaRoja.txt", encoding = "UTF-8")
lobaNegra <- readLines("Recursos/9-LobaNegra.txt", encoding = "UTF-8")
reyBlanco <- readLines("Recursos/10-Rey-blanco.txt", encoding = "UTF-8")
# Loba Negra empieza con la frase:
grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
# Rey Blanco empieza con la frase:
grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
# Reina Roja empieza con la frase:
grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
# Reina Roja empieza con la frase:
grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
# Loba Negra empieza con la frase:
grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
# Rey Blanco empieza con la frase:
grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
lobaNegra <- lobaNegra[-c(1:57)]
lobaNegra[1:6]
lobaNegra[1:60]
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:37)]
# Loba Negra empieza con la frase:
grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
lobaNegra <- lobaNegra[-c(1:47)]
# Rey Blanco empieza con la frase:
grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
lobaNegra <- lobaNegra[-c(1:57)]
lobaNegra[1:60]
[1:60]
# En primer lugar cargamos los libros
reinaRoja <- readLines("Recursos/8-ReinaRoja.txt", encoding = "UTF-8")
lobaNegra <- readLines("Recursos/9-LobaNegra.txt", encoding = "UTF-8")
reyBlanco <- readLines("Recursos/10-Rey-blanco.txt", encoding = "UTF-8")
# Reina Roja empieza con la frase:
grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:37)]
# Loba Negra empieza con la frase:
grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
lobaNegra <- lobaNegra[-c(1:47)]
# Rey Blanco empieza con la frase:
grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
reyBlanco <- reyBlanco[-c(1:57)]
library(utf8)
reinaRoja[!utf8_valid(reinaRoja)]
lobaNegra[!utf8_valid(lobaNegra)]
reyBlanco[!utf8_valid(reyBlanco)]
# Eliminamos caracteres de formato que no interesan
gsub('[\t\n]', '', reyBlanco)
reyBlanco[1:60]
# Eliminamos caracteres de formato que no interesan
gsub('\t', '', reyBlanco)
reyBlanco[1:60]
library(stringr)
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, "([\n\t])", "")
reyBlanco[1:60]
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, """", "")
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, "\"\"", "")
reyBlanco[1:60]
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, "\"\"", "")
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, "\\t", "")
reyBlanco[1:60]
reyBlanco[1:6]
vacios <- which(reyBlanco=="")
reyBlanco <- reyBlanco[-c(vacios)]
reyBlanco[1:6]
#Eliminamos las líneas que están vacías
vaciosRB <- which(reyBlanco=="")
# En primer lugar cargamos los libros
reinaRoja <- readLines("Recursos/8-ReinaRoja.txt", encoding = "UTF-8")
lobaNegra <- readLines("Recursos/9-LobaNegra.txt", encoding = "UTF-8")
reyBlanco <- readLines("Recursos/10-Rey-blanco.txt", encoding = "UTF-8")
# Reina Roja empieza con la frase:
grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
# Loba Negra empieza con la frase:
grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
# Reina Roja empieza con la frase:
primeraLineaRR <- grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
# Rey Blanco empieza con la frase:
primeraLineaRB <- grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
# Loba Negra empieza con la frase:
primeraLineaLN <- grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:primeraLineaRR)]
lobaNegra <- lobaNegra[-c(primeraLineaLN)]
reyBlanco <- reyBlanco[-c(1:primeraLineaRB)]
# Comprobamos que no existan caracteres no reconocibles
reinaRoja[!utf8_valid(reinaRoja)]
lobaNegra[!utf8_valid(lobaNegra)]
reyBlanco[!utf8_valid(reyBlanco)]
# En primer lugar cargamos los libros
reinaRoja <- readLines("Recursos/8-ReinaRoja.txt", encoding = "UTF-8")
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:primeraLineaRR[0])]
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:primeraLineaRR[1])]
#Eliminamos las líneas que están vacías
vaciosRR <- which(reinaRoja=="")
reinaRoja <- reinaRoja[-c(vaciosRR)]
vaciosLN <- which(lobaNegra=="")
lobaNegra <- lobaNegra[-c(vaciosLN)]
vaciosRB <- which(reyBlanco=="")
reyBlanco <- reyBlanco[-c(vaciosRB)]
# Eliminamos caracteres de formato que no interesan
str_replace_all(reyBlanco, "[\t]", "")
# Eliminamos caracteres de formato que no interesan
salida <- gsub("[\t]{1,}", "", reinaRoja)
salida <- gsub("[\t]{1,}", "", reyBlanco)
reyBlanco[1:6]
gsub("[\t]{1,}", "", reyBlanco)
# Eliminamos caracteres de formato que no interesan
reinaRoja <- gsub("[\t]{1,}", "", reinaRoja)
lobaNegra <- gsub("[\t]{1,}", "", lobaNegra)
reyBlanco <- gsub("[\t]{1,}", "", reyBlanco)
reyBlanco[1:6]
reyBlanco[1:60]
a <- gsub("[]{2,}", "", reinaRoja)
a <- gsub("[ ]{2,}", "", reinaRoja)
b <- gsub("[ ]{2,}", "", lobaNegra)
c <- gsub("[ ]{2,}", "", reyBlanco)
reyBlanco <- gsub("[ ]{2,}", "", reyBlanco)
# Substituimos varios espacios por uno sólo
reinaRoja <- gsub("[ ]{2,}", "", reinaRoja)
lobaNegra <- gsub("[ ]{2,}", "", lobaNegra)
reyBlanco <- gsub("[ ]{2,}", "", reyBlanco)
library(spacyr)
install.packages("spacyr")
library(spacyr)
spacy_initialize(model="es_core_news_sm")
spacy_initialize(model="es_core_news_sm")
spacy_download_langmodel("es")
spacy_install()
setwd("~/OneDrive - Universidad Politécnica de Madrid/10_MASTER/1 CUATRI/00_Intelligent Systems/Project NLP/Recursos")
setwd("~/Documents/Master/IntelligentSystems/Project_NLP")
library(utf8)
library(utf8)
library(stringr)
library(spacyr)
# En primer lugar cargamos los libros
reinaRoja <- readLines("Recursos/8-ReinaRoja.txt", encoding = "UTF-8")
lobaNegra <- readLines("Recursos/9-LobaNegra.txt", encoding = "UTF-8")
reyBlanco <- readLines("Recursos/10-Rey-blanco.txt", encoding = "UTF-8")
# Reina Roja empieza con la frase:
primeraLineaRR <- grep(pattern = "Antonia Scott sólo se permite pensar en el suicidio tres minutos al día.",
reinaRoja,
fixed = TRUE)
# Loba Negra empieza con la frase:
primeraLineaLN <- grep(pattern = "Antonia Scott nunca se ha enfrentado a una decisión tan difícil.",
lobaNegra,
fixed = TRUE)
# Rey Blanco empieza con la frase:
primeraLineaRB <- grep(pattern = "Antonia Scott no tiene ni siquiera tres minutos",
reyBlanco,
fixed = TRUE)
#Eliminamos todo lo que sobra del inicio
reinaRoja <- reinaRoja[-c(1:primeraLineaRR[1])]
lobaNegra <- lobaNegra[-c(primeraLineaLN)]
reyBlanco <- reyBlanco[-c(1:primeraLineaRB)]
# Comprobamos que no existan caracteres no reconocibles
reinaRoja[!utf8_valid(reinaRoja)]
lobaNegra[!utf8_valid(lobaNegra)]
reyBlanco[!utf8_valid(reyBlanco)]
#Eliminamos las líneas que están vacías (respresentadas por ""), se puede hacer también con gsub, pero esta es otra forma
vaciosRR <- which(reinaRoja=="")
reinaRoja <- reinaRoja[-c(vaciosRR)]
vaciosLN <- which(lobaNegra=="")
lobaNegra <- lobaNegra[-c(vaciosLN)]
vaciosRB <- which(reyBlanco=="")
reyBlanco <- reyBlanco[-c(vaciosRB)]
# Eliminamos caracteres de formato que no interesan
reinaRoja <- gsub("[\t]{1,}", "", reinaRoja)
lobaNegra <- gsub("[\t]{1,}", "", lobaNegra)
reyBlanco <- gsub("[\t]{1,}", "", reyBlanco)
# Substituimos varios espacios por uno sólo
reinaRoja <- gsub("[ ]{2,}", "", reinaRoja)
lobaNegra <- gsub("[ ]{2,}", "", lobaNegra)
reyBlanco <- gsub("[ ]{2,}", "", reyBlanco)
reyBlanco[1:60]
spacy_install()
